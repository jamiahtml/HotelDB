/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package demo;

import java.sql.Connection;

import java.sql.*;
import javax.swing.JOptionPane;
import static demo.Connections.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;


public class ReservationPage extends javax.swing.JFrame {

    Connection con;
    PreparedStatement pts;
    ResultSet rs;
    
    public ReservationPage() {
        initComponents();
        show_res();
    }
    public ArrayList<Reservation> reservationList(){
        ArrayList<Reservation> reservationList = new ArrayList<>();
        try{
            Class.forName(("com.mysql.jdbc.Driver"));
            con = Connections.getConnection();
            String query1 = "SELECT * FROM reservation";
            Statement st = con.createStatement();
            rs = st.executeQuery(query1);
            Reservation reservation;
            while (rs.next()){
                reservation = new Reservation(rs.getString("res_num"),rs.getString("r_username"),rs.getString("checkin_date"),rs.getString("checkout_date"),rs.getString("r_num"),rs.getString("guest_username"),rs.getInt("checked_in"),rs.getInt("checked_out"));
                reservationList.add(reservation);
            }
        
        }
        catch(Exception ex){
            JOptionPane.showMessageDialog(null,ex);
        }
        return reservationList;
        
    }
    public void show_res(){
        ArrayList<Reservation> list = reservationList();
        DefaultTableModel model = (DefaultTableModel)jTable_Display_Reservations.getModel();
        Object[] row = new Object[8];
        for (int i = 0; i < list.size();i++){
            row[0] = list.get(i).getResnum();
            row[1] = list.get(i).getReceptionist();
            row[2] = list.get(i).getCheckinD();
            row[3] = list.get(i).getCheckout();
            row[4] = list.get(i).getRoom();
            row[5] = list.get(i).getGuest();
            row[6] = list.get(i).isCheckin();
            row[7] = list.get(i).isCheckout();
            model.addRow(row);
            
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        res_num = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        r_username = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        checkin_date = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        checkout_date = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        r_num = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        guest_username = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_Display_Reservations = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        checkin = new javax.swing.JButton();
        checkout = new javax.swing.JButton();
        homeButton = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Reservation Num");

        res_num.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                res_numActionPerformed(evt);
            }
        });

        jLabel2.setText("Receptionist");

        r_username.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                r_usernameActionPerformed(evt);
            }
        });

        jLabel3.setText("CheckIn Date");

        checkin_date.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkin_dateActionPerformed(evt);
            }
        });

        jLabel4.setText("CheckOut Date");

        checkout_date.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkout_dateActionPerformed(evt);
            }
        });

        jLabel5.setText("Room Number: ");

        r_num.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                r_numActionPerformed(evt);
            }
        });

        jLabel6.setText("Guest Username");

        guest_username.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guest_usernameActionPerformed(evt);
            }
        });

        jTable_Display_Reservations.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Reservation #", "Receptionist", "CheckIn Date", "Checkout Date", "Room #", "Guest Uname", "CheckedIn", "CheckedOut"
            }
        ));
        jTable_Display_Reservations.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_Display_ReservationsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable_Display_Reservations);

        jButton1.setText("Add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        checkin.setText("Check In");
        checkin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkinActionPerformed(evt);
            }
        });

        checkout.setText("Check Out");
        checkout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkoutActionPerformed(evt);
            }
        });

        homeButton.setText("Go Back");
        homeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(48, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(guest_username, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(r_num, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel4))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(r_username, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(checkin_date, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(res_num, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(checkout_date, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(12, 12, 12))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(checkin)
                                    .addComponent(jButton1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(updateButton)
                                    .addComponent(checkout)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(homeButton)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 754, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(homeButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(res_num, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(r_username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(checkin_date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(checkout_date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(r_num, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(guest_username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(updateButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkin)
                    .addComponent(checkout))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 497, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void res_numActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_res_numActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_res_numActionPerformed

    private void r_usernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_r_usernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_r_usernameActionPerformed

    private void checkin_dateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkin_dateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkin_dateActionPerformed

    private void checkout_dateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkout_dateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkout_dateActionPerformed

    private void r_numActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_r_numActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_r_numActionPerformed

    private void guest_usernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guest_usernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_guest_usernameActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // save button
        
        try{
            
            con = Connections.getConnection();
            
            String query = "INSERT into reservation(res_num, r_username, checkin_date, checkout_date, r_num,guest_username) values (?,?,?,?,?,?)";
            
            pts = con.prepareStatement(query);
            pts.setString(1,res_num.getText());
            pts.setString(2,r_username.getText());
            pts.setString(3,checkin_date.getText());
            pts.setString(4,checkout_date.getText());
            pts.setString(5,r_num.getText());
            pts.setString(6,guest_username.getText());
            pts.executeUpdate();
            PreparedStatement roomCost = con.prepareStatement("SELECT r_price FROM room WHERE r_num = "+r_num.getText());
            ResultSet resultCost = roomCost.executeQuery();
            ArrayList<String> costArray = new ArrayList<>();
            String price = "";
            while(resultCost.next()){
                costArray.add(resultCost.getString("r_price"));
                price = resultCost.getString("r_price");
            }
            PreparedStatement dateDiff = con.prepareStatement("SELECT DATEDIFF(checkout_date,checkin_date) FROM reservation WHERE res_num =?;");
            dateDiff.setString(1,res_num.getText());
            ResultSet dd = dateDiff.executeQuery();
            int diff =0;
            while (dd.next()){
                diff = dd.getInt(1);
            }
            
            int cost = (Integer.parseInt(price))*diff;
            PreparedStatement creditInfo = con.prepareStatement("SELECT cc_info FROM guest WHERE g_username = '"+guest_username.getText()+"'");
            ArrayList<String> ccArray = new ArrayList<String>();
                ResultSet resultCCard = creditInfo.executeQuery();
                while(resultCCard.next()) {
                    ccArray.add(resultCCard.getString("cc_info"));
		}
           PreparedStatement insertBill = con.prepareStatement("INSERT INTO bill(res_num, paid_on, payment_amount, cc_info, guest_username) VALUES "
					+ "(" + res_num.getText() + "," + " '" + checkout_date.getText() + "', " + cost + ", " + ccArray.get(0) + ", '" + guest_username.getText() + "')");
            pts = con.prepareStatement("SELECT cc_info FROM guest WHERE g_username = '"+guest_username.getText()+"'");
            insertBill.executeUpdate();
            
            DefaultTableModel model = (DefaultTableModel)jTable_Display_Reservations.getModel();
            model.setRowCount(0);
            show_res();
            JOptionPane.showMessageDialog(null, "Reservation and Bill Created!");
            
        }
        catch(Exception ex){
            JOptionPane.showMessageDialog(null,ex);
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // TODO add your handling code here:
        try{
            con = Connections.getConnection();
            int row = jTable_Display_Reservations.getSelectedRow();
            String value = (jTable_Display_Reservations.getModel().getValueAt(row, 0).toString());
            String query = "UPDATE reservation SET   checkin_date =?, checkout_date = ?, r_num = ? WHERE res_num="+value;
            pts = con.prepareStatement(query);
            pts.setString(1,checkin_date.getText());
            pts.setString(2,checkout_date.getText());
            pts.setString(3,r_num.getText());
            pts.executeUpdate();
            PreparedStatement roomCost = con.prepareStatement("SELECT r_price FROM room WHERE r_num = "+r_num.getText());
            ResultSet resultCost = roomCost.executeQuery();
            ArrayList<String> costArray = new ArrayList<>();
            String price = "";
            while(resultCost.next()){
                costArray.add(resultCost.getString("r_price"));
                price = resultCost.getString("r_price");
            }
            PreparedStatement dateDiff = con.prepareStatement("SELECT DATEDIFF(checkout_date,checkin_date) FROM reservation WHERE res_num =?;");
            dateDiff.setString(1,res_num.getText());
            ResultSet dd = dateDiff.executeQuery();
            int diff =0;
            while (dd.next()){
                diff = dd.getInt(1);
            }
            
            int cost = (Integer.parseInt(price))*diff;
            PreparedStatement creditInfo = con.prepareStatement("SELECT cc_info FROM guest WHERE g_username = '"+guest_username.getText()+"'");
            ArrayList<String> ccArray = new ArrayList<String>();
                ResultSet resultCCard = creditInfo.executeQuery();
                while(resultCCard.next()) {
                    ccArray.add(resultCCard.getString("cc_info"));
		}
            PreparedStatement updateBill = con.prepareStatement("UPDATE bill SET res_num = ?, paid_on = ?, payment_amount=?, cc_info=?, guest_username=? WHERE res_num ="+res_num.getText()) ;
            updateBill.setString(1,res_num.getText());
            updateBill.setString(2,checkout_date.getText());
            updateBill.setFloat(3,cost);
            updateBill.setString(4,ccArray.get(0));
            updateBill.setString(5,guest_username.getText());
            updateBill.executeUpdate();
            DefaultTableModel model = (DefaultTableModel)jTable_Display_Reservations.getModel();
            model.setRowCount(0);
            show_res();
            JOptionPane.showMessageDialog(null, "Update Reservation and Bill Information!");
            
        }
        catch(Exception ex){
            JOptionPane.showMessageDialog(null,ex);
        }
        
        
    }//GEN-LAST:event_updateButtonActionPerformed

    private void jTable_Display_ReservationsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_Display_ReservationsMouseClicked
        int i = jTable_Display_Reservations.getSelectedRow();
        TableModel model = jTable_Display_Reservations.getModel();
        res_num.setText(model.getValueAt(i, 0).toString());
        r_username.setText(model.getValueAt(i, 1).toString());
        checkin_date.setText(model.getValueAt(i, 2).toString());
        checkout_date.setText(model.getValueAt(i, 3).toString());
        r_num.setText(model.getValueAt(i, 4).toString());
        guest_username.setText(model.getValueAt(i, 5 ).toString());
        
    }//GEN-LAST:event_jTable_Display_ReservationsMouseClicked

    private void checkinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkinActionPerformed
        try{
            Class.forName(("com.mysql.jdbc.Driver"));
            con = Connections.getConnection();
            int row = jTable_Display_Reservations.getSelectedRow();
            String value = (jTable_Display_Reservations.getModel().getValueAt(row, 0).toString());
            String query = "UPDATE reservation SET checked_in =?, checked_out = ? WHERE res_num="+value;
            pts = con.prepareStatement(query);
            pts.setInt(1, 1);
            pts.setInt(2,0);
            pts.executeUpdate();
            PreparedStatement room = con.prepareStatement("SELECT r_num FROM reservation WHERE res_num="+value);
            ResultSet result = room.executeQuery();
            ArrayList<String> array = new ArrayList<>();
            while(result.next()){
                array.add(result.getString("r_num"));
            }
            String r_n = array.get(0);
            PreparedStatement roomUpdate = con.prepareStatement("UPDATE room SET r_available = ? WHERE r_num = "+r_n);
            roomUpdate.setBoolean(1, false);
            roomUpdate.executeUpdate();
            
            DefaultTableModel model = (DefaultTableModel)jTable_Display_Reservations.getModel();
            model.setRowCount(0);
            show_res();
        }catch (Exception ex){
            JOptionPane.showMessageDialog(null,ex);
        }
    }//GEN-LAST:event_checkinActionPerformed

    private void checkoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkoutActionPerformed
        try{
            Class.forName(("com.mysql.jdbc.Driver"));
            con = Connections.getConnection();
            int row = jTable_Display_Reservations.getSelectedRow();
            String value = (jTable_Display_Reservations.getModel().getValueAt(row, 0).toString());
            String query = "UPDATE reservation SET checked_in =?, checked_out = ? WHERE res_num="+value;
            pts = con.prepareStatement(query);
            pts.setInt(1,0);
            pts.setInt(2,1);
            pts.executeUpdate();
            PreparedStatement room = con.prepareStatement("SELECT r_num FROM reservation WHERE res_num="+value);
            ResultSet result = room.executeQuery();
            ArrayList<String> array = new ArrayList<>();
            while(result.next()){
                array.add(result.getString("r_num"));
            }
            String r_n = array.get(0);
            PreparedStatement roomUpdate = con.prepareStatement("UPDATE room SET r_available = ? WHERE r_num = "+r_n);
            roomUpdate.setBoolean(1, true);
            roomUpdate.executeUpdate();
            DefaultTableModel model = (DefaultTableModel)jTable_Display_Reservations.getModel();
            model.setRowCount(0);
            show_res();
        }catch (Exception ex){
            JOptionPane.showMessageDialog(null,ex);
        }
    }//GEN-LAST:event_checkoutActionPerformed

    private void homeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeButtonActionPerformed
        // TODO add your handling code here
        ReceptionistPage rp = new ReceptionistPage();
        rp.setVisible(true);
        setVisible(false);
        
    }//GEN-LAST:event_homeButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReservationPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReservationPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReservationPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReservationPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReservationPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton checkin;
    private javax.swing.JTextField checkin_date;
    private javax.swing.JButton checkout;
    private javax.swing.JTextField checkout_date;
    private javax.swing.JTextField guest_username;
    private javax.swing.JButton homeButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable_Display_Reservations;
    private javax.swing.JTextField r_num;
    private javax.swing.JTextField r_username;
    private javax.swing.JTextField res_num;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
